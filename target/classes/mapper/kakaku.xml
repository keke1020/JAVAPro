<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mp.dao.kakakuDao">
	<resultMap type="kakaku" id="kakakuResult">
		<id column="ID" property="ID" jdbcType="INTEGER" />
		<result column="code" property="code" jdbcType="VARCHAR" />
		<result column="name" property="name" jdbcType="VARCHAR" />
		<result column="genka" property="genka" jdbcType="INTEGER" />
		<result column="haiso" property="haiso" jdbcType="VARCHAR" />
		<result column="raku-price" property="raku_price" jdbcType="INTEGER" />
		<result column="raku-sale" property="raku_sale" jdbcType="INTEGER" />
		<result column="raku-sale-limit" property="raku_sale_limit" jdbcType="TIMESTAMP" />
		<result column="yahoo-price" property="yahoo_price" jdbcType="INTEGER" />
		<result column="yahoo-sale" property="yahoo_sale" jdbcType="INTEGER" />
		<result column="yahoo-sale-limit" property="yahoo_sale_limit" jdbcType="TIMESTAMP" />
		<result column="memo" property="memo" jdbcType="VARCHAR" />
		<result column="update" property="update" jdbcType="TIMESTAMP" />
		<result column="tanto" property="tanto" jdbcType="VARCHAR" />
	</resultMap>

	<select id="getKakaku" resultMap="kakakuResult">
		select * from kakaku
		WHERE (`update` >= '0000-00-00')
		<if test="s_code!=null and s_code.length>0">
			and `code` in
			<foreach collection="s_code" item="s_code_" index="index" open="("
				close=")" separator=",">
				#{s_code_}
			</foreach>
		</if>
		<choose>
			<when test="t_price1!='' and t_price2!='' and t_price_ch1 ==true and t_price_ch2 ==true">
				AND ((`raku-price` &gt; #{t_price1}) AND (`raku-price` &lt; #{t_price2}))
				AND ((`yahoo-price` &gt; #{t_price1}) AND (`yahoo-price` &lt; #{t_price2}))
			</when>
			<when test="t_price1!='' and t_price2=='' and t_price_ch1 ==true">
				AND (`raku-price` &gt; #{t_price1})
			</when>
			<when test="t_price1=='' and t_price2!='' and t_price_ch2 ==true">
				AND (`yahoo-price` &lt; #{t_price2})
			</when>
			<otherwise>
			</otherwise>
		</choose>

		<choose>
			<when test="s_price1!='' and s_price2!='' and s_price_ch1 ==true and s_price_ch2 ==true">
				AND ((`raku-sale` &gt; #{s_price1}) AND (`raku-sale` &lt; #{s_price2}))
				AND ((`yahoo-sale` &gt; #{s_price1}) AND (`yahoo-sale` &lt; #{s_price2}))
			</when>
			<when test="s_price1!='' and s_price2=='' and s_price_ch1 ==true">
				AND ((`raku-sale` &gt; #{s_price1}) AND ((`yahoo-sale` &gt; #{s_price1}))
			</when>
			<when test="s_price1=='' and s_price2!='' and s_price_ch2 ==true">
				AND ((`raku-sale` &lt; #{s_price2}) AND ((`yahoo-sale` &lt; #{s_price2}))
			</when>
			<otherwise>
			</otherwise>
		</choose>

		<choose>

			<when test="s_limit1!='' and s_limit2!='' and s_limit_ch1 ==true and s_limit_ch2 ==true">
				AND ((`raku-sale-limit` &gt;= #{s_limit1}) AND (`raku-sale-limit` &lt;= #{s_limit2}))
				AND ((`yahoo-sale-limit` &gt;= #{s_limit1}) AND (`yahoo-sale-limit` &lt;= #{s_limit2}))
			</when>

			<when test="s_limit1!='' and s_limit2!='' and s_limit_ch1 ==true">
				AND ((`raku-sale-limit` &gt; #{s_limit1}) AND (`raku-sale-limit` &gt; #{s_limit2}))
			</when>
			<when test="s_limit1!='' and s_limit2!='' and s_limit_ch2 ==true">
				AND ((`yahoo-sale-limit` &lt; #{s_limit1}) AND (`yahoo-sale-limit` &lt; #{s_limit2}))
			</when>

			<otherwise>
			</otherwise>
		</choose>

		<if test="s_update1!='' and s_update2!=''">
			AND ((`update` &gt;= #{s_update1}) AND (`update` &lt;= #{s_update2}))
		</if>

		<choose>
			<when test="sort == '更新順'">
				order by kakaku.update desc
			</when>
			<when test="sort == '文字順（降順）'">
				order by kakaku.code desc
			</when>
			<when test="sort == '文字順（昇順）'">
				order by kakaku.code
			</when>
			<otherwise>

			</otherwise>
		</choose>
		limit #{offset}, #{limit}
	</select>

	<select id="getTotal" resultType="java.lang.Integer">
		select count(*) from `kakaku`
	</select>

	<update id="updateKakaku" parameterType="com.mp.entity.custom">
		UPDATE `kakaku`
		<set>
            `haiso`=#{haiso},
            `raku-price`=#{raku_price},
            `raku-sale`=#{raku_sale},
            `raku-sale-limit`=#{raku_sale_limit},
            `yahoo-price`=#{yahoo_price},
            `yahoo-sale`=#{yahoo_sale},
            `yahoo-sale-limit`=#{yahoo_sale_limit},
            `memo`=#{memo},
            `tanto`=#{tanto},
        </set>
		WHERE `ID` = #{ID}
	</update>

	<select id="getKakakuRireki" resultMap="kakakuResult">
		select `update` as 'update', `message` as name from kakaku_rireki where (`code` like #{code})
	</select>

	<select id="getAllCodes" resultMap="kakakuResult">
		select * from kakaku
	</select>

</mapper>